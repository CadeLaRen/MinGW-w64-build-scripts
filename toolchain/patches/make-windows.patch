diff --git a/getopt.c b/getopt.c
index e992da5..a328100 100644
--- a/getopt.c
+++ b/getopt.c
@@ -436,6 +436,9 @@ _getopt_initialize (int argc, char *const *argv, const char *optstring)
     }
   else
     nonoption_flags_len = 0;
+#else
+  (void)argc;
+  (void)argv;
 #endif
 
   return optstring;
@@ -678,7 +681,7 @@ _getopt_internal (int argc, char *const *argv, const char *optstring,
 		optarg = nameend + 1;
 	      else
 		{
-		  if (opterr)
+		  if (opterr) {
 		   if (argv[optind - 1][1] == '-')
 		    /* --option */
 		    fprintf (stderr,
@@ -689,7 +692,7 @@ _getopt_internal (int argc, char *const *argv, const char *optstring,
 		    fprintf (stderr,
 		     _("%s: option `%c%s' doesn't allow an argument\n"),
 		     argv[0], argv[optind - 1][0], pfound->name);
-
+		  }
 		  nextchar += strlen (nextchar);
 
 		  optopt = pfound->val;
diff --git a/make.h b/make.h
index 5eb4975..556769c 100644
--- a/make.h
+++ b/make.h
@@ -316,10 +316,14 @@ char *strsignal (int signum);
 #define S_(msg1,msg2,num)   ngettext (msg1,msg2,num)
 
 /* Handle other OSs.  */
-#ifndef PATH_SEPARATOR_CHAR
-# if defined(HAVE_DOS_PATHS)
-#  define PATH_SEPARATOR_CHAR ';'
-# elif defined(VMS)
+/* To overcome an issue parsing paths in a DOS/Windows environment when
+   built in a unix based environment, override the PATH_SEPARATOR_CHAR
+   definition unless being built for Cygwin. */
+#if defined(HAVE_DOS_PATHS) && !defined(__CYGWIN__)
+# undef PATH_SEPARATOR_CHAR
+# define PATH_SEPARATOR_CHAR ';'
+#elif !defined(PATH_SEPARATOR_CHAR)
+# if defined (VMS)
 #  define PATH_SEPARATOR_CHAR ','
 # else
 #  define PATH_SEPARATOR_CHAR ':'
diff --git a/w32/include/w32err.h b/w32/include/w32err.h
index 65369ba..29fdbc8 100644
--- a/w32/include/w32err.h
+++ b/w32/include/w32err.h
@@ -22,6 +22,6 @@ this program.  If not, see <http://www.gnu.org/licenses/>.  */
 #define EXTERN_DECL(entry, args) entry args
 #endif
 
-EXTERN_DECL(char * map_windows32_error_to_string, (DWORD error));
+EXTERN_DECL(const char *map_windows32_error_to_string, (DWORD error));
 
 #endif /* !_W32ERR_H */
diff --git a/w32/subproc/w32err.c b/w32/subproc/w32err.c
index 80d796e..ea36d9d 100644
--- a/w32/subproc/w32err.c
+++ b/w32/subproc/w32err.c
@@ -26,18 +26,25 @@ this program.  If not, see <http://www.gnu.org/licenses/>.  */
  * Notes/Dependencies:  I got this from
  *      comp.os.ms-windows.programmer.win32
  */
-char *
-map_windows32_error_to_string (DWORD ercode) {
-/* __declspec (thread) necessary if you will use multiple threads on MSVC */
-#ifdef _MSC_VER
-__declspec (thread) static char szMessageBuffer[128];
+
+#if defined(_MSC_VER) /* MS Visual Studio */
+#define __TLS_VAR __declspec(thread)
+#elif defined(__GNUC__) && ((__GNUC__ > 4) \
+  || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
+/* gcc >= 4.3, also needs binutils >= 2.19 */
+#define __TLS_VAR __thread
 #else
-static char szMessageBuffer[128];
+#define __TLS_VAR	/* default to none */
 #endif
+
+const char *
+map_windows32_error_to_string (DWORD ercode) {
+/* __declspec(thread) necessary if you will use multiple threads */
+	static __TLS_VAR char szMessageBuffer[128];
 	/* Fill message buffer with a default message in
 	 * case FormatMessage fails
 	 */
-    wsprintf (szMessageBuffer, "Error %ld\n", ercode);
+	wsprintf (szMessageBuffer, "Error %ld\n", ercode);
 
 	/*
 	 *  Special code for winsock error handling.
@@ -58,13 +65,14 @@ static char szMessageBuffer[128];
 		/*
 		 *  Default system message handling
 		 */
-    	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
-                  NULL,
-                  ercode,
-                  LANG_NEUTRAL,
-                  szMessageBuffer,
-                  sizeof(szMessageBuffer),
-                  NULL);
+		FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
+				NULL,
+				ercode,
+				LANG_NEUTRAL,
+				szMessageBuffer,
+				sizeof(szMessageBuffer),
+				NULL);
 	}
-    return szMessageBuffer;
+
+	return szMessageBuffer;
 }
